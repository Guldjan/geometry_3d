var search_data = {"index":{"searchIndex":["circle","line","linetest","linearequation","plane","point","pointtest","testcircle","testplane","testtriangle","triangle","vector","vectortest","+()","==()","==()","==()","==()","area()","construct_with_normal_vector_and_point()","construct_with_plane()","construct_with_plane_and_point()","construct_with_three_points()","construct_with_two_points()","construct_with_two_points()","construct_with_two_vectors_and_point()","cross_product()","distance_to()","find_intersecting_point()","find_normal_vector()","get_centroid()","get_line_ab()","get_line_ac()","get_line_bc()","get_median_a()","get_median_b()","get_median_c()","get_midpoint()","get_plane()","is_on_line?()","is_on_plane?()","new()","new()","new()","new()","new()","new()","new()","perimeter()","round()","solve_system()","test_area()","test_construct_with_normal_vector_and_point()","test_construct_with_plane()","test_construct_with_plane_and_point()","test_construct_with_three_points()","test_construct_with_two_points()","test_construct_with_two_points()","test_construct_with_two_vectors_and_point()","test_cross_product()","test_distance_to()","test_find_normal_vector()","test_get_centroid()","test_get_line_ab()","test_get_line_ac()","test_get_line_bc()","test_get_median_a()","test_get_median_b()","test_get_median_c()","test_get_midpoint()","test_get_plane()","test_intersecting_point()","test_is_on_line()","test_is_point_on_plane()","test_perimeter()","test_sum_vector()","test_translate()","to_a()","to_a()","to_a()","translate()","rakefile","circle.html","line.html","linetest.html","linearequation.html","plane.html","point.html","pointtest.html","rakefile.html","testcircle.html","testplane.html","testtriangle.html","triangle.html","vector.html","vectortest.html","fonts.css","geometry_3d_gemspec.html","index.html","darkfish.js","jquery.js","navigation.js","search.js","search_index.js","searcher.js","rdoc.css","table_of_contents.html","geometry_3d.gemspec"],"longSearchIndex":["circle","line","linetest","linearequation","plane","point","pointtest","testcircle","testplane","testtriangle","triangle","vector","vectortest","vector#+()","line#==()","plane#==()","point#==()","vector#==()","circle#area()","plane::construct_with_normal_vector_and_point()","vector::construct_with_plane()","plane::construct_with_plane_and_point()","plane::construct_with_three_points()","line::construct_with_two_points()","vector::construct_with_two_points()","plane::construct_with_two_vectors_and_point()","vector#cross_product()","point#distance_to()","line#find_intersecting_point()","plane#find_normal_vector()","triangle#get_centroid()","triangle#get_line_ab()","triangle#get_line_ac()","triangle#get_line_bc()","triangle#get_median_a()","triangle#get_median_b()","triangle#get_median_c()","point#get_midpoint()","triangle#get_plane()","point#is_on_line?()","point#is_on_plane?()","circle::new()","line::new()","linearequation::new()","plane::new()","point::new()","triangle::new()","vector::new()","circle#perimeter()","point#round()","linearequation#solve_system()","testcircle#test_area()","testplane#test_construct_with_normal_vector_and_point()","vectortest#test_construct_with_plane()","testplane#test_construct_with_plane_and_point()","testplane#test_construct_with_three_points()","linetest#test_construct_with_two_points()","vectortest#test_construct_with_two_points()","testplane#test_construct_with_two_vectors_and_point()","vectortest#test_cross_product()","pointtest#test_distance_to()","testplane#test_find_normal_vector()","testtriangle#test_get_centroid()","testtriangle#test_get_line_ab()","testtriangle#test_get_line_ac()","testtriangle#test_get_line_bc()","testtriangle#test_get_median_a()","testtriangle#test_get_median_b()","testtriangle#test_get_median_c()","pointtest#test_get_midpoint()","testtriangle#test_get_plane()","linetest#test_intersecting_point()","pointtest#test_is_on_line()","pointtest#test_is_point_on_plane()","testcircle#test_perimeter()","vectortest#test_sum_vector()","pointtest#test_translate()","plane#to_a()","point#to_a()","vector#to_a()","point#translate()","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Circle","","Circle.html","",""],["Line","","Line.html","",""],["LineTest","","LineTest.html","",""],["LinearEquation","","LinearEquation.html","",""],["Plane","","Plane.html","",""],["Point","","Point.html","",""],["PointTest","","PointTest.html","",""],["TestCircle","","TestCircle.html","",""],["TestPlane","","TestPlane.html","",""],["TestTriangle","","TestTriangle.html","",""],["Triangle","","Triangle.html","",""],["Vector","","Vector.html","",""],["VectorTest","","VectorTest.html","",""],["+","Vector","Vector.html#method-i-2B","(vector)","<p>Finds the sum vector of two vectors.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">+</span> (<span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">-2</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">-1</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Line","Line.html#method-i-3D-3D","(line)",""],["==","Plane","Plane.html#method-i-3D-3D","(plane)",""],["==","Point","Point.html#method-i-3D-3D","(point)",""],["==","Vector","Vector.html#method-i-3D-3D","(vector)",""],["area","Circle","Circle.html#method-i-area","()","<p>Find the area of a circle.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Circle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>), <span class=\"ruby-value\">3</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">28.274333882308138</span>\n</pre>\n"],["construct_with_normal_vector_and_point","Plane","Plane.html#method-c-construct_with_normal_vector_and_point","(vector, point)","<p>Construct plane with normal vector and passing through a point.\n<p>Example:\n\n<pre>&gt;&gt; Plane.construct_with_normal_vector_and_point(Vector.new(-2, ...</pre>\n"],["construct_with_plane","Vector","Vector.html#method-c-construct_with_plane","(plane)","<p>Construct a vector as normal vector to a plane.\n<p>Example:\n\n<pre>&gt;&gt; Vector.construct_with_plane(Plane.new(-2, 5, ...</pre>\n"],["construct_with_plane_and_point","Plane","Plane.html#method-c-construct_with_plane_and_point","(plane, point)","<p>Construct a plane parallel other plane and passing through a point.\n<p>Example:\n\n<pre>&gt;&gt; Plane.construct_with_plane_and_point(Plane.new(2, ...</pre>\n"],["construct_with_three_points","Plane","Plane.html#method-c-construct_with_three_points","(point1, point2, point3)","<p>Construct a plane passing through three points.\n<p>Example:\n\n<pre>&gt;&gt; Plane.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["construct_with_two_points","Line","Line.html#method-c-construct_with_two_points","(first_point, second_point)","<p>Construct a line with two points.\n<p>Example:\n\n<pre>&gt;&gt; Line.construct_with_two_points(Point.new(1, 2, 3), Point.new(3, ...</pre>\n"],["construct_with_two_points","Vector","Vector.html#method-c-construct_with_two_points","(first_point, second_point)","<p>Construct a vector with two points.\n<p>Example:\n\n<pre>&gt;&gt; Vector.construct_with_two_points(Point.new(1, 2, 3), Point.new(3, ...</pre>\n"],["construct_with_two_vectors_and_point","Plane","Plane.html#method-c-construct_with_two_vectors_and_point","(vector1, vector2, point)","<p>Construct a plane parallel to two vectors and passing through a point.\n<p>Example:\n\n<pre>&gt;&gt; Plane.construct_with_two_vectors_and_point(Vector.new(1, ...</pre>\n"],["cross_product","Vector","Vector.html#method-i-cross_product","(vector)","<p>Finds a vector perpendicular to both vectors.\n<p>Example:\n\n<pre>&gt;&gt; Vector.new(1, 2, 3).cross_product(Vector.new(-2, ...</pre>\n"],["distance_to","Point","Point.html#method-i-distance_to","(point)","<p>Find the distance between two points\n<p>Example:\n\n<pre>&gt;&gt; Point.new(-7, -4, 3).distance_to(Point.new(17, 6, 2.5)) ...</pre>\n"],["find_intersecting_point","Line","Line.html#method-i-find_intersecting_point","(line)","<p>Find intersecting point of two lines.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(1,-2,3), Vector.new(5,2,-1)).find_intersecting_point(Line.new(Point.new(-4,-4,1), ...</pre>\n"],["find_normal_vector","Plane","Plane.html#method-i-find_normal_vector","()","<p>Find normal vector of the plane\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">-5</span>, <span class=\"ruby-value\">1.5</span>, <span class=\"ruby-value\">3</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">-2</span>, <span class=\"ruby-value\">-5</span>, <span class=\"ruby-value\">1.5</span>)\n</pre>\n"],["get_centroid","Triangle","Triangle.html#method-i-get_centroid","()","<p>Find the centroid of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, 6, 9), Point.new(12, ...</pre>\n"],["get_line_ab","Triangle","Triangle.html#method-i-get_line_ab","()","<p>Find the line in which the AB side of the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_ac","Triangle","Triangle.html#method-i-get_line_ac","()","<p>Find the line in which the AC side of the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_bc","Triangle","Triangle.html#method-i-get_line_bc","()","<p>Find the line in which the BC side of the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_median_a","Triangle","Triangle.html#method-i-get_median_a","()","<p>Find the median of the triangle from the point A\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_median_b","Triangle","Triangle.html#method-i-get_median_b","()","\n<pre>Find the median of the triangle from the point B.\n\nExample:\n  &gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_median_c","Triangle","Triangle.html#method-i-get_median_c","()","<p>Find the median of the triangle from the point C.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_midpoint","Point","Point.html#method-i-get_midpoint","(point)","<p>Find the midpoint between two points\n<p>Example:\n\n<pre>&gt;&gt; Point.new(-7, -4, 3).get_midpoint(Point.new(17, 6, 2.5)) ...</pre>\n"],["get_plane","Triangle","Triangle.html#method-i-get_plane","()","<p>Find the plane in which the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, 6, ...</pre>\n"],["is_on_line?","Point","Point.html#method-i-is_on_line-3F","(line)","<p>Check if a point is on a line\n<p>Example:\n\n<pre>&gt;&gt; Point.new(1, 1, 4).is_on_line?(Line.new(Point.new(2, -1, 3), ...</pre>\n"],["is_on_plane?","Point","Point.html#method-i-is_on_plane-3F","(plane)","<p>Check if a point is on a plane\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">is_on_plane?</span>(<span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">-6</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n</pre>\n"],["new","Circle","Circle.html#method-c-new","(point, vector, radius)",""],["new","Line","Line.html#method-c-new","(point, vector)",""],["new","LinearEquation","LinearEquation.html#method-c-new","(a, b, c)",""],["new","Plane","Plane.html#method-c-new","(a, b, c, d)",""],["new","Point","Point.html#method-c-new","(x, y, z)",""],["new","Triangle","Triangle.html#method-c-new","(point_a, point_b, point_c)",""],["new","Vector","Vector.html#method-c-new","(x, y, z)",""],["perimeter","Circle","Circle.html#method-i-perimeter","()","<p>Find the perimeter of a circle.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Circle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>), <span class=\"ruby-value\">3</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">18.84955592153876</span>\n</pre>\n"],["round","Point","Point.html#method-i-round","()",""],["solve_system","LinearEquation","LinearEquation.html#method-i-solve_system","(equation)",""],["test_area","TestCircle","TestCircle.html#method-i-test_area","()",""],["test_construct_with_normal_vector_and_point","TestPlane","TestPlane.html#method-i-test_construct_with_normal_vector_and_point","()",""],["test_construct_with_plane","VectorTest","VectorTest.html#method-i-test_construct_with_plane","()",""],["test_construct_with_plane_and_point","TestPlane","TestPlane.html#method-i-test_construct_with_plane_and_point","()",""],["test_construct_with_three_points","TestPlane","TestPlane.html#method-i-test_construct_with_three_points","()",""],["test_construct_with_two_points","LineTest","LineTest.html#method-i-test_construct_with_two_points","()",""],["test_construct_with_two_points","VectorTest","VectorTest.html#method-i-test_construct_with_two_points","()",""],["test_construct_with_two_vectors_and_point","TestPlane","TestPlane.html#method-i-test_construct_with_two_vectors_and_point","()",""],["test_cross_product","VectorTest","VectorTest.html#method-i-test_cross_product","()",""],["test_distance_to","PointTest","PointTest.html#method-i-test_distance_to","()",""],["test_find_normal_vector","TestPlane","TestPlane.html#method-i-test_find_normal_vector","()",""],["test_get_centroid","TestTriangle","TestTriangle.html#method-i-test_get_centroid","()",""],["test_get_line_ab","TestTriangle","TestTriangle.html#method-i-test_get_line_ab","()",""],["test_get_line_ac","TestTriangle","TestTriangle.html#method-i-test_get_line_ac","()",""],["test_get_line_bc","TestTriangle","TestTriangle.html#method-i-test_get_line_bc","()",""],["test_get_median_a","TestTriangle","TestTriangle.html#method-i-test_get_median_a","()",""],["test_get_median_b","TestTriangle","TestTriangle.html#method-i-test_get_median_b","()",""],["test_get_median_c","TestTriangle","TestTriangle.html#method-i-test_get_median_c","()",""],["test_get_midpoint","PointTest","PointTest.html#method-i-test_get_midpoint","()",""],["test_get_plane","TestTriangle","TestTriangle.html#method-i-test_get_plane","()",""],["test_intersecting_point","LineTest","LineTest.html#method-i-test_intersecting_point","()","<p>def test_find_point\n\n<pre>assert_equal Point.new(0, 8, 9),\nLine.new(Point.new(2, 4, 1), Vector.new(-1, 2, 4)).find_point(2)</pre>\n"],["test_is_on_line","PointTest","PointTest.html#method-i-test_is_on_line","()",""],["test_is_point_on_plane","PointTest","PointTest.html#method-i-test_is_point_on_plane","()",""],["test_perimeter","TestCircle","TestCircle.html#method-i-test_perimeter","()",""],["test_sum_vector","VectorTest","VectorTest.html#method-i-test_sum_vector","()",""],["test_translate","PointTest","PointTest.html#method-i-test_translate","()",""],["to_a","Plane","Plane.html#method-i-to_a","()",""],["to_a","Point","Point.html#method-i-to_a","()",""],["to_a","Vector","Vector.html#method-i-to_a","()",""],["translate","Point","Point.html#method-i-translate","(vector)","<p>Translate a point with a vector\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">-1</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">translate</span>(<span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre>t.libs &lt;&lt; &#39;test&#39;</pre>\n"],["Circle.html","","doc/Circle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Line.html","","doc/Line_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["LineTest.html","","doc/LineTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["LinearEquation.html","","doc/LinearEquation_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Plane.html","","doc/Plane_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Point.html","","doc/Point_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["PointTest.html","","doc/PointTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Rakefile.html","","doc/Rakefile_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Rakefile …\n"],["TestCircle.html","","doc/TestCircle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["TestPlane.html","","doc/TestPlane_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["TestTriangle.html","","doc/TestTriangle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Triangle.html","","doc/Triangle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Vector.html","","doc/Vector_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["VectorTest.html","","doc/VectorTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["fonts.css","","doc/fonts_css.html","","\n<pre>Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/),\nwith Reserved Font Name &quot;Source&quot;. ...</pre>\n"],["geometry_3d_gemspec.html","","doc/geometry_3d_gemspec_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;geometry_3d.gemspec …\n"],["index.html","","doc/index_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;RDoc …\n"],["darkfish.js","","doc/js/darkfish_js.html","","\n<pre>Darkfish Page Functions\n$Id: darkfish.js 53 2009-01-07 02:52:03Z deveiant $\n\nAuthor: Michael Granger ...</pre>\n"],["jquery.js","","doc/js/jquery_js.html","","\n<pre>! jQuery v1.6.4 http://jquery.com/ | http://jquery.org/license</pre>\n<p>(function(a,b){function cu(a){return f.isWindow …\n"],["navigation.js","","doc/js/navigation_js.html","","\n<pre>Navigation allows movement using the arrow keys through the search results.\n\nWhen using this library ...</pre>\n"],["search.js","","doc/js/search_js.html","","<p>Search = function(data, input, result) {\n\n<pre>this.data = data;\nthis.$input = $(input);\nthis.$result = $(result); ...</pre>\n"],["search_index.js","","doc/js/search_index_js.html","","<p>var search_data = {“index”:{“searchIndex”:,“longSearchIndex”:,“info”:[,[“ …\n"],["searcher.js","","doc/js/searcher_js.html","","<p>Searcher = function(data) {\n\n<pre>this.data = data;\nthis.handlers = [];</pre>\n<p>}\n"],["rdoc.css","","doc/rdoc_css.html","","\n<pre>&quot;Darkfish&quot; Rdoc CSS\n$Id: rdoc.css 54 2009-01-27 01:09:48Z deveiant $\n\nAuthor: Michael Granger &lt;ged@FaerieMUD.org&gt; ...</pre>\n"],["table_of_contents.html","","doc/table_of_contents_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Table …\n"],["geometry_3d.gemspec","","geometry_3d_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;geometry_3d&#39;\ns.version     = &#39;0.1.1&#39;\ns.executables = &#39;geometry_3d&#39; ...</pre>\n"]]}}