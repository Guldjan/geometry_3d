var search_data = {"index":{"searchIndex":["circle","circletest","line","linetest","linearequation","plane","planetest","point","pointtest","sphere","spheretest","triangle","triangletest","vector","vectortest","+()","==()","==()","==()","==()","area()","area()","circumference()","construct_with_normal_vector_and_point()","construct_with_plane()","construct_with_plane_and_point()","construct_with_three_points()","construct_with_two_points()","construct_with_two_points()","construct_with_two_vectors_and_point()","cross_product()","distance_to_line()","distance_to_plane()","distance_to_point()","find_angle_with_plane()","find_intersecting_line_of_planes()","find_intersecting_point_with_line()","find_intersecting_point_with_plane()","find_normal_vector()","get_centroid()","get_line_ab()","get_line_ac()","get_line_bc()","get_line_height_a()","get_line_height_b()","get_line_height_c()","get_line_median_a()","get_line_median_b()","get_line_median_c()","get_midpoint()","get_plane()","intersect?()","intersect?()","intersect?()","intersect_plane?()","is_on_line?()","is_on_plane?()","length()","length_ab()","length_ac()","length_bc()","length_height_a()","length_height_b()","length_height_c()","length_median_a()","length_median_b()","length_median_c()","new()","new()","new()","new()","new()","new()","new()","new()","parallel?()","parallel?()","parallel_to_plane?()","perimeter()","perimeter()","radius_of_circumscribed_circle()","radius_of_inscribed_circle()","round()","scalar_product()","skew?()","solve_system()","substitute()","surface_area()","test_angle_with_plane_no()","test_angle_with_plane_yes()","test_area()","test_area()","test_circumference()","test_construct_with_normal_vector_and_point()","test_construct_with_plane()","test_construct_with_plane_and_point()","test_construct_with_three_points()","test_construct_with_two_points()","test_construct_with_two_points()","test_construct_with_two_vectors_and_point()","test_cross_product()","test_distance_to_line()","test_distance_to_line_zero()","test_distance_to_plane()","test_distance_to_plane_zero()","test_distance_to_point()","test_find_normal_vector()","test_get_centroid()","test_get_line_ab()","test_get_line_ac()","test_get_line_bc()","test_get_line_height_a()","test_get_line_height_b()","test_get_line_height_c()","test_get_line_median_a()","test_get_line_median_b()","test_get_line_median_c()","test_get_midpoint()","test_get_plane()","test_intersect_no()","test_intersect_no()","test_intersect_plane_no()","test_intersect_plane_yes()","test_intersect_yes()","test_intersect_yes()","test_intersect_yes()","test_intersecting_line_of_planes_no()","test_intersecting_line_of_planes_yes()","test_intersecting_point_with_line_no()","test_intersecting_point_with_line_yes()","test_intersecting_point_with_plane_no()","test_intersecting_point_with_plane_yes()","test_is_on_line_no()","test_is_on_line_yes()","test_is_point_on_plane_no()","test_is_point_on_plane_yes()","test_length()","test_length_ab()","test_length_ac()","test_length_bc()","test_length_height_a()","test_length_height_b()","test_length_height_c()","test_length_median_a()","test_length_median_b()","test_length_median_c()","test_parallel_no()","test_parallel_no()","test_parallel_to_plane_no()","test_parallel_to_plane_yes()","test_parallel_yes()","test_parallel_yes()","test_perimeter()","test_perimeter()","test_radius_of_circumscribed_circle()","test_radius_of_inscribed_circle()","test_scalar_product()","test_skew_no()","test_skew_yes()","test_sum_vector()","test_surface_area()","test_translate()","test_volume()","to_a()","to_a()","to_a()","translate()","volume()","rakefile","circle.html","line.html","linetest.html","linearequation.html","plane.html","point.html","pointtest.html","rakefile.html","testcircle.html","testplane.html","testtriangle.html","triangle.html","vector.html","vectortest.html","circle_html.html","linetest_html.html","line_html.html","linearequation_html.html","plane_html.html","pointtest_html.html","point_html.html","rakefile_html.html","testcircle_html.html","testplane_html.html","testtriangle_html.html","triangle_html.html","vectortest_html.html","vector_html.html","fonts_css.html","geometry_3d_gemspec_html.html","index_html.html","darkfish_js.html","jquery_js.html","navigation_js.html","search_index_js.html","search_js.html","searcher_js.html","rdoc_css.html","table_of_contents_html.html","fonts.css","geometry_3d_gemspec.html","index.html","darkfish.js","jquery.js","navigation.js","search.js","search_index.js","searcher.js","rdoc.css","table_of_contents.html","geometry_3d.gemspec"],"longSearchIndex":["circle","circletest","line","linetest","linearequation","plane","planetest","point","pointtest","sphere","spheretest","triangle","triangletest","vector","vectortest","vector#+()","line#==()","plane#==()","point#==()","vector#==()","circle#area()","triangle#area()","sphere#circumference()","plane::construct_with_normal_vector_and_point()","vector::construct_with_plane()","plane::construct_with_plane_and_point()","plane::construct_with_three_points()","line::construct_with_two_points()","vector::construct_with_two_points()","plane::construct_with_two_vectors_and_point()","vector#cross_product()","point#distance_to_line()","point#distance_to_plane()","point#distance_to_point()","line#find_angle_with_plane()","plane#find_intersecting_line_of_planes()","line#find_intersecting_point_with_line()","line#find_intersecting_point_with_plane()","plane#find_normal_vector()","triangle#get_centroid()","triangle#get_line_ab()","triangle#get_line_ac()","triangle#get_line_bc()","triangle#get_line_height_a()","triangle#get_line_height_b()","triangle#get_line_height_c()","triangle#get_line_median_a()","triangle#get_line_median_b()","triangle#get_line_median_c()","point#get_midpoint()","triangle#get_plane()","line#intersect?()","plane#intersect?()","sphere#intersect?()","line#intersect_plane?()","point#is_on_line?()","point#is_on_plane?()","vector#length()","triangle#length_ab()","triangle#length_ac()","triangle#length_bc()","triangle#length_height_a()","triangle#length_height_b()","triangle#length_height_c()","triangle#length_median_a()","triangle#length_median_b()","triangle#length_median_c()","circle::new()","line::new()","linearequation::new()","plane::new()","point::new()","sphere::new()","triangle::new()","vector::new()","line#parallel?()","plane#parallel?()","line#parallel_to_plane?()","circle#perimeter()","triangle#perimeter()","triangle#radius_of_circumscribed_circle()","triangle#radius_of_inscribed_circle()","point#round()","vector#scalar_product()","line#skew?()","linearequation#solve_system()","plane#substitute()","sphere#surface_area()","linetest#test_angle_with_plane_no()","linetest#test_angle_with_plane_yes()","circletest#test_area()","triangletest#test_area()","spheretest#test_circumference()","planetest#test_construct_with_normal_vector_and_point()","vectortest#test_construct_with_plane()","planetest#test_construct_with_plane_and_point()","planetest#test_construct_with_three_points()","linetest#test_construct_with_two_points()","vectortest#test_construct_with_two_points()","planetest#test_construct_with_two_vectors_and_point()","vectortest#test_cross_product()","pointtest#test_distance_to_line()","pointtest#test_distance_to_line_zero()","pointtest#test_distance_to_plane()","pointtest#test_distance_to_plane_zero()","pointtest#test_distance_to_point()","planetest#test_find_normal_vector()","triangletest#test_get_centroid()","triangletest#test_get_line_ab()","triangletest#test_get_line_ac()","triangletest#test_get_line_bc()","triangletest#test_get_line_height_a()","triangletest#test_get_line_height_b()","triangletest#test_get_line_height_c()","triangletest#test_get_line_median_a()","triangletest#test_get_line_median_b()","triangletest#test_get_line_median_c()","pointtest#test_get_midpoint()","triangletest#test_get_plane()","linetest#test_intersect_no()","spheretest#test_intersect_no()","linetest#test_intersect_plane_no()","linetest#test_intersect_plane_yes()","linetest#test_intersect_yes()","planetest#test_intersect_yes()","spheretest#test_intersect_yes()","planetest#test_intersecting_line_of_planes_no()","planetest#test_intersecting_line_of_planes_yes()","linetest#test_intersecting_point_with_line_no()","linetest#test_intersecting_point_with_line_yes()","linetest#test_intersecting_point_with_plane_no()","linetest#test_intersecting_point_with_plane_yes()","pointtest#test_is_on_line_no()","pointtest#test_is_on_line_yes()","pointtest#test_is_point_on_plane_no()","pointtest#test_is_point_on_plane_yes()","vectortest#test_length()","triangletest#test_length_ab()","triangletest#test_length_ac()","triangletest#test_length_bc()","triangletest#test_length_height_a()","triangletest#test_length_height_b()","triangletest#test_length_height_c()","triangletest#test_length_median_a()","triangletest#test_length_median_b()","triangletest#test_length_median_c()","linetest#test_parallel_no()","planetest#test_parallel_no()","linetest#test_parallel_to_plane_no()","linetest#test_parallel_to_plane_yes()","linetest#test_parallel_yes()","planetest#test_parallel_yes()","circletest#test_perimeter()","triangletest#test_perimeter()","triangletest#test_radius_of_circumscribed_circle()","triangletest#test_radius_of_inscribed_circle()","vectortest#test_scalar_product()","linetest#test_skew_no()","linetest#test_skew_yes()","vectortest#test_sum_vector()","spheretest#test_surface_area()","pointtest#test_translate()","spheretest#test_volume()","plane#to_a()","point#to_a()","vector#to_a()","point#translate()","sphere#volume()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Circle","","Circle.html","",""],["CircleTest","","CircleTest.html","",""],["Line","","Line.html","",""],["LineTest","","LineTest.html","",""],["LinearEquation","","LinearEquation.html","",""],["Plane","","Plane.html","",""],["PlaneTest","","PlaneTest.html","",""],["Point","","Point.html","",""],["PointTest","","PointTest.html","",""],["Sphere","","Sphere.html","",""],["SphereTest","","SphereTest.html","",""],["Triangle","","Triangle.html","",""],["TriangleTest","","TriangleTest.html","",""],["Vector","","Vector.html","",""],["VectorTest","","VectorTest.html","",""],["+","Vector","Vector.html#method-i-2B","(vector)","<p>Finds the sum vector of two vectors.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">+</span> (<span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">-2</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">-1</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Line","Line.html#method-i-3D-3D","(line)",""],["==","Plane","Plane.html#method-i-3D-3D","(plane)",""],["==","Point","Point.html#method-i-3D-3D","(point)",""],["==","Vector","Vector.html#method-i-3D-3D","(vector)",""],["area","Circle","Circle.html#method-i-area","()","<p>Find the area of a circle.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Circle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>), <span class=\"ruby-value\">3</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">28.274333882308138</span>\n</pre>\n"],["area","Triangle","Triangle.html#method-i-area","()","<p>Finds the area of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), Point.new(2, 2, 7), Point.new(1, ...</pre>\n"],["circumference","Sphere","Sphere.html#method-i-circumference","()","<p>Find the circumference of a sphere.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Sphere</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">circumference</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">18.84955592153876</span>\n</pre>\n"],["construct_with_normal_vector_and_point","Plane","Plane.html#method-c-construct_with_normal_vector_and_point","(vector, point)","<p>Construct plane with normal vector and passing through a point.\n<p>Example:\n\n<pre>&gt;&gt; Plane.construct_with_normal_vector_and_point(Vector.new(-2, ...</pre>\n"],["construct_with_plane","Vector","Vector.html#method-c-construct_with_plane","(plane)","<p>Construct a vector as normal vector to a plane.\n<p>Example:\n\n<pre>&gt;&gt; Vector.construct_with_plane(Plane.new(-2, 5, ...</pre>\n"],["construct_with_plane_and_point","Plane","Plane.html#method-c-construct_with_plane_and_point","(plane, point)","<p>Construct a plane parallel other plane and passing through a point.\n<p>Example:\n\n<pre>&gt;&gt; Plane.construct_with_plane_and_point(Plane.new(2, ...</pre>\n"],["construct_with_three_points","Plane","Plane.html#method-c-construct_with_three_points","(point1, point2, point3)","<p>Construct a plane passing through three points.\n<p>Example:\n\n<pre>&gt;&gt; Plane.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["construct_with_two_points","Line","Line.html#method-c-construct_with_two_points","(first_point, second_point)","<p>Construct a line with two points.\n<p>Example:\n\n<pre>&gt;&gt; Line.construct_with_two_points(Point.new(1, 2, 3), Point.new(3, ...</pre>\n"],["construct_with_two_points","Vector","Vector.html#method-c-construct_with_two_points","(first_point, second_point)","<p>Construct a vector with two points.\n<p>Example:\n\n<pre>&gt;&gt; Vector.construct_with_two_points(Point.new(1, 2, 3), Point.new(3, ...</pre>\n"],["construct_with_two_vectors_and_point","Plane","Plane.html#method-c-construct_with_two_vectors_and_point","(vector1, vector2, point)","<p>Construct a plane parallel to two vectors and passing through a point.\n<p>Example:\n\n<pre>&gt;&gt; Plane.construct_with_two_vectors_and_point(Vector.new(1, ...</pre>\n"],["cross_product","Vector","Vector.html#method-i-cross_product","(vector)","<p>Finds a vector perpendicular to both vectors.\n<p>Example:\n\n<pre>&gt;&gt; Vector.new(1, 2, 3).cross_product(Vector.new(-2, ...</pre>\n"],["distance_to_line","Point","Point.html#method-i-distance_to_line","(line)","<p>Finds the distance between point and line.\n<p>Example:\n\n<pre>&gt;&gt; Point.new(0, 2, 3).distance_to_line(Line.new(Point.new(3, ...</pre>\n"],["distance_to_plane","Point","Point.html#method-i-distance_to_plane","(plane)","<p>Finds the distance between point and plane.\n<p>Example:\n\n<pre>&gt;&gt; Point.new(4, -4, 3).distance_to_plane(Plane.new(2, ...</pre>\n"],["distance_to_point","Point","Point.html#method-i-distance_to_point","(point)","<p>Finds the distance between two points.\n<p>Example:\n\n<pre>&gt;&gt; Point.new(-7, -4, 3).distance_to_point(Point.new(17, ...</pre>\n"],["find_angle_with_plane","Line","Line.html#method-i-find_angle_with_plane","(plane)","<p>Find the angle(degrees) between line and plane. If the line and the plane\ndo not intersect nil is returned. …\n"],["find_intersecting_line_of_planes","Plane","Plane.html#method-i-find_intersecting_line_of_planes","(plane)","<p>Find intersecting line of two planes. If the two planes do not intersect,\nreturns nil.\n<p>Example:\n\n<pre>&gt;&gt; Plane.new(2, ...</pre>\n"],["find_intersecting_point_with_line","Line","Line.html#method-i-find_intersecting_point_with_line","(line)","<p>Finds the intersecting point of two lines. If the two lines do not\nintersect returns nil.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(4, ...</pre>\n"],["find_intersecting_point_with_plane","Line","Line.html#method-i-find_intersecting_point_with_plane","(plane)","<p>Find intersecting point of line and plane. If the line and the plane do not\nintersect nil is returned. …\n"],["find_normal_vector","Plane","Plane.html#method-i-find_normal_vector","()","<p>Find normal vector of the plane\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">-5</span>, <span class=\"ruby-value\">1.5</span>, <span class=\"ruby-value\">3</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">-2</span>, <span class=\"ruby-value\">-5</span>, <span class=\"ruby-value\">1.5</span>)\n</pre>\n"],["get_centroid","Triangle","Triangle.html#method-i-get_centroid","()","<p>Find the centroid of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, 6, 9), Point.new(12, ...</pre>\n"],["get_line_ab","Triangle","Triangle.html#method-i-get_line_ab","()","<p>Find the line in which the AB side of the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_ac","Triangle","Triangle.html#method-i-get_line_ac","()","<p>Find the line in which the AC side of the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_bc","Triangle","Triangle.html#method-i-get_line_bc","()","<p>Find the line in which the BC side of the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_height_a","Triangle","Triangle.html#method-i-get_line_height_a","()","<p>Find the line in which the height from the point A lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_height_b","Triangle","Triangle.html#method-i-get_line_height_b","()","<p>Find the line in which the height from the point B lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_height_c","Triangle","Triangle.html#method-i-get_line_height_c","()","<p>Find the line in which the height from the point C lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_median_a","Triangle","Triangle.html#method-i-get_line_median_a","()","<p>Find the median of the triangle from the point A\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_median_b","Triangle","Triangle.html#method-i-get_line_median_b","()","<p>Find the median of the triangle from the point B.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_line_median_c","Triangle","Triangle.html#method-i-get_line_median_c","()","<p>Find the median of the triangle from the point C.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, ...</pre>\n"],["get_midpoint","Point","Point.html#method-i-get_midpoint","(point)","<p>Finds the midpoint between two points.\n<p>Example:\n\n<pre>&gt;&gt; Point.new(-7, -4, 3).get_midpoint(Point.new(17, 6, 2.5)) ...</pre>\n"],["get_plane","Triangle","Triangle.html#method-i-get_plane","()","<p>Find the plane in which the triangle lies.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 2, 3), Point.new(4, 6, ...</pre>\n"],["intersect?","Line","Line.html#method-i-intersect-3F","(line)","<p>Check if two lines intersect.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(4, 19, 12), Vector.new(1, 6, 5)).intersect?(Line.new(Point.new(-3, ...</pre>\n"],["intersect?","Plane","Plane.html#method-i-intersect-3F","(plane)","<p>Check if two planes intersect.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">parallel?</span>(<span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">-4</span>, <span class=\"ruby-value\">6</span>, <span class=\"ruby-value\">-4</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["intersect?","Sphere","Sphere.html#method-i-intersect-3F","(sphere)","<p>Checks if two spheres intersect/\n<p>Example:\n\n<pre>&gt;&gt; Sphere.new(Point.new(-7, -4, 3), 20).intersect?(Sphere.new(Point.new(17, ...</pre>\n"],["intersect_plane?","Line","Line.html#method-i-intersect_plane-3F","(plane)","<p>Check if a line and a plane intersect.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(4, -5, 1), Vector.new(2, 4, 3)).intersect_plane?(Plane.new(1, ...</pre>\n"],["is_on_line?","Point","Point.html#method-i-is_on_line-3F","(line)","<p>Check if a point is on a line\n<p>Example:\n\n<pre>&gt;&gt; Point.new(1, 1, 4).is_on_line?(Line.new(Point.new(2, -1, 3), ...</pre>\n"],["is_on_plane?","Point","Point.html#method-i-is_on_plane-3F","(plane)","<p>Check if a point is on a plane\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">is_on_plane?</span>(<span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">-6</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n</pre>\n"],["length","Vector","Vector.html#method-i-length","()","<p>Finds the length of the vector.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">length</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">5</span>\n</pre>\n"],["length_ab","Triangle","Triangle.html#method-i-length_ab","()","<p>Finds the length of the AB side of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), Point.new(2, ...</pre>\n"],["length_ac","Triangle","Triangle.html#method-i-length_ac","()","<p>Finds the length of the AC side of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), Point.new(2, ...</pre>\n"],["length_bc","Triangle","Triangle.html#method-i-length_bc","()","<p>Finds the length of the BC side of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), Point.new(2, ...</pre>\n"],["length_height_a","Triangle","Triangle.html#method-i-length_height_a","()","<p>Finds the length of the height form point A of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["length_height_b","Triangle","Triangle.html#method-i-length_height_b","()","<p>Finds the length of the height form point B of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["length_height_c","Triangle","Triangle.html#method-i-length_height_c","()","<p>Finds the length of the height form point C of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["length_median_a","Triangle","Triangle.html#method-i-length_median_a","()","<p>Finds the length of the median form point A of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["length_median_b","Triangle","Triangle.html#method-i-length_median_b","()","<p>Finds the length of the median form point B of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["length_median_c","Triangle","Triangle.html#method-i-length_median_c","()","<p>Finds the length of the median form point C of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["new","Circle","Circle.html#method-c-new","(point = Point.new(0, 0, 0), vector = Vector.new(0, 0, 1), radius)",""],["new","Line","Line.html#method-c-new","(point, vector)",""],["new","LinearEquation","LinearEquation.html#method-c-new","(a, b, c)",""],["new","Plane","Plane.html#method-c-new","(a, b, c, d)",""],["new","Point","Point.html#method-c-new","(x, y, z)",""],["new","Sphere","Sphere.html#method-c-new","(point, radius)",""],["new","Triangle","Triangle.html#method-c-new","(point_a, point_b, point_c)",""],["new","Vector","Vector.html#method-c-new","(x, y, z)",""],["parallel?","Line","Line.html#method-i-parallel-3F","(line)","<p>Check if two lines are parallel.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(1, 0, 1), Vector.new(3, -2, 1)).parallel?(Line.new(Point.new(2, ...</pre>\n"],["parallel?","Plane","Plane.html#method-i-parallel-3F","(plane)","<p>Check if two planes are parallel.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">parallel?</span>(<span class=\"ruby-constant\">Plane</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">6</span>, <span class=\"ruby-value\">-4</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parallel_to_plane?","Line","Line.html#method-i-parallel_to_plane-3F","(plane)","<p>Check if a line and a plane are parallel.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(4, -5, 1), Vector.new(2, 4, 3)).parallel_to_plane?(Plane.new(1, ...</pre>\n"],["perimeter","Circle","Circle.html#method-i-perimeter","()","<p>Find the perimeter of a circle.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Circle</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">1</span>), <span class=\"ruby-value\">3</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">18.84955592153876</span>\n</pre>\n"],["perimeter","Triangle","Triangle.html#method-i-perimeter","()","<p>Finds the perimeter of the triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), Point.new(2, 2, 7), Point.new(1, ...</pre>\n"],["radius_of_circumscribed_circle","Triangle","Triangle.html#method-i-radius_of_circumscribed_circle","()","<p>Finds the radius of the circumscribed circle in triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), ...</pre>\n"],["radius_of_inscribed_circle","Triangle","Triangle.html#method-i-radius_of_inscribed_circle","()","<p>Finds the radius of the inscribed circle in triangle.\n<p>Example:\n\n<pre>&gt;&gt; Triangle.new(Point.new(1, 1, 1), Point.new(2, ...</pre>\n"],["round","Point","Point.html#method-i-round","(number)",""],["scalar_product","Vector","Vector.html#method-i-scalar_product","(vector)","<p>Finds the scalar product of two vector.\n<p>Example:\n\n<pre>&gt;&gt; Vector.new(1, 2, 3).scalar_product(Vector.new(-2, 1, ...</pre>\n"],["skew?","Line","Line.html#method-i-skew-3F","(line)","<p>Check if two lines are skew.\n<p>Example:\n\n<pre>&gt;&gt; Line.new(Point.new(4, -5, 1), Vector.new(2, 4, 3)).skew?(Line.new(Point.new(2, ...</pre>\n"],["solve_system","LinearEquation","LinearEquation.html#method-i-solve_system","(equation)",""],["substitute","Plane","Plane.html#method-i-substitute","(primitive)",""],["surface_area","Sphere","Sphere.html#method-i-surface_area","()","<p>Find the surface area of a sphere.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Sphere</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">surface_area</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">113.09733552923254</span>\n</pre>\n"],["test_angle_with_plane_no","LineTest","LineTest.html#method-i-test_angle_with_plane_no","()",""],["test_angle_with_plane_yes","LineTest","LineTest.html#method-i-test_angle_with_plane_yes","()",""],["test_area","CircleTest","CircleTest.html#method-i-test_area","()",""],["test_area","TriangleTest","TriangleTest.html#method-i-test_area","()",""],["test_circumference","SphereTest","SphereTest.html#method-i-test_circumference","()",""],["test_construct_with_normal_vector_and_point","PlaneTest","PlaneTest.html#method-i-test_construct_with_normal_vector_and_point","()",""],["test_construct_with_plane","VectorTest","VectorTest.html#method-i-test_construct_with_plane","()",""],["test_construct_with_plane_and_point","PlaneTest","PlaneTest.html#method-i-test_construct_with_plane_and_point","()",""],["test_construct_with_three_points","PlaneTest","PlaneTest.html#method-i-test_construct_with_three_points","()",""],["test_construct_with_two_points","LineTest","LineTest.html#method-i-test_construct_with_two_points","()",""],["test_construct_with_two_points","VectorTest","VectorTest.html#method-i-test_construct_with_two_points","()",""],["test_construct_with_two_vectors_and_point","PlaneTest","PlaneTest.html#method-i-test_construct_with_two_vectors_and_point","()",""],["test_cross_product","VectorTest","VectorTest.html#method-i-test_cross_product","()",""],["test_distance_to_line","PointTest","PointTest.html#method-i-test_distance_to_line","()",""],["test_distance_to_line_zero","PointTest","PointTest.html#method-i-test_distance_to_line_zero","()",""],["test_distance_to_plane","PointTest","PointTest.html#method-i-test_distance_to_plane","()",""],["test_distance_to_plane_zero","PointTest","PointTest.html#method-i-test_distance_to_plane_zero","()",""],["test_distance_to_point","PointTest","PointTest.html#method-i-test_distance_to_point","()",""],["test_find_normal_vector","PlaneTest","PlaneTest.html#method-i-test_find_normal_vector","()",""],["test_get_centroid","TriangleTest","TriangleTest.html#method-i-test_get_centroid","()",""],["test_get_line_ab","TriangleTest","TriangleTest.html#method-i-test_get_line_ab","()",""],["test_get_line_ac","TriangleTest","TriangleTest.html#method-i-test_get_line_ac","()",""],["test_get_line_bc","TriangleTest","TriangleTest.html#method-i-test_get_line_bc","()",""],["test_get_line_height_a","TriangleTest","TriangleTest.html#method-i-test_get_line_height_a","()",""],["test_get_line_height_b","TriangleTest","TriangleTest.html#method-i-test_get_line_height_b","()",""],["test_get_line_height_c","TriangleTest","TriangleTest.html#method-i-test_get_line_height_c","()",""],["test_get_line_median_a","TriangleTest","TriangleTest.html#method-i-test_get_line_median_a","()",""],["test_get_line_median_b","TriangleTest","TriangleTest.html#method-i-test_get_line_median_b","()",""],["test_get_line_median_c","TriangleTest","TriangleTest.html#method-i-test_get_line_median_c","()",""],["test_get_midpoint","PointTest","PointTest.html#method-i-test_get_midpoint","()",""],["test_get_plane","TriangleTest","TriangleTest.html#method-i-test_get_plane","()",""],["test_intersect_no","LineTest","LineTest.html#method-i-test_intersect_no","()",""],["test_intersect_no","SphereTest","SphereTest.html#method-i-test_intersect_no","()",""],["test_intersect_plane_no","LineTest","LineTest.html#method-i-test_intersect_plane_no","()",""],["test_intersect_plane_yes","LineTest","LineTest.html#method-i-test_intersect_plane_yes","()",""],["test_intersect_yes","LineTest","LineTest.html#method-i-test_intersect_yes","()",""],["test_intersect_yes","PlaneTest","PlaneTest.html#method-i-test_intersect_yes","()",""],["test_intersect_yes","SphereTest","SphereTest.html#method-i-test_intersect_yes","()",""],["test_intersecting_line_of_planes_no","PlaneTest","PlaneTest.html#method-i-test_intersecting_line_of_planes_no","()",""],["test_intersecting_line_of_planes_yes","PlaneTest","PlaneTest.html#method-i-test_intersecting_line_of_planes_yes","()",""],["test_intersecting_point_with_line_no","LineTest","LineTest.html#method-i-test_intersecting_point_with_line_no","()",""],["test_intersecting_point_with_line_yes","LineTest","LineTest.html#method-i-test_intersecting_point_with_line_yes","()",""],["test_intersecting_point_with_plane_no","LineTest","LineTest.html#method-i-test_intersecting_point_with_plane_no","()",""],["test_intersecting_point_with_plane_yes","LineTest","LineTest.html#method-i-test_intersecting_point_with_plane_yes","()",""],["test_is_on_line_no","PointTest","PointTest.html#method-i-test_is_on_line_no","()",""],["test_is_on_line_yes","PointTest","PointTest.html#method-i-test_is_on_line_yes","()",""],["test_is_point_on_plane_no","PointTest","PointTest.html#method-i-test_is_point_on_plane_no","()",""],["test_is_point_on_plane_yes","PointTest","PointTest.html#method-i-test_is_point_on_plane_yes","()",""],["test_length","VectorTest","VectorTest.html#method-i-test_length","()",""],["test_length_ab","TriangleTest","TriangleTest.html#method-i-test_length_ab","()",""],["test_length_ac","TriangleTest","TriangleTest.html#method-i-test_length_ac","()",""],["test_length_bc","TriangleTest","TriangleTest.html#method-i-test_length_bc","()",""],["test_length_height_a","TriangleTest","TriangleTest.html#method-i-test_length_height_a","()",""],["test_length_height_b","TriangleTest","TriangleTest.html#method-i-test_length_height_b","()",""],["test_length_height_c","TriangleTest","TriangleTest.html#method-i-test_length_height_c","()",""],["test_length_median_a","TriangleTest","TriangleTest.html#method-i-test_length_median_a","()",""],["test_length_median_b","TriangleTest","TriangleTest.html#method-i-test_length_median_b","()",""],["test_length_median_c","TriangleTest","TriangleTest.html#method-i-test_length_median_c","()",""],["test_parallel_no","LineTest","LineTest.html#method-i-test_parallel_no","()",""],["test_parallel_no","PlaneTest","PlaneTest.html#method-i-test_parallel_no","()",""],["test_parallel_to_plane_no","LineTest","LineTest.html#method-i-test_parallel_to_plane_no","()",""],["test_parallel_to_plane_yes","LineTest","LineTest.html#method-i-test_parallel_to_plane_yes","()",""],["test_parallel_yes","LineTest","LineTest.html#method-i-test_parallel_yes","()",""],["test_parallel_yes","PlaneTest","PlaneTest.html#method-i-test_parallel_yes","()",""],["test_perimeter","CircleTest","CircleTest.html#method-i-test_perimeter","()",""],["test_perimeter","TriangleTest","TriangleTest.html#method-i-test_perimeter","()",""],["test_radius_of_circumscribed_circle","TriangleTest","TriangleTest.html#method-i-test_radius_of_circumscribed_circle","()",""],["test_radius_of_inscribed_circle","TriangleTest","TriangleTest.html#method-i-test_radius_of_inscribed_circle","()",""],["test_scalar_product","VectorTest","VectorTest.html#method-i-test_scalar_product","()",""],["test_skew_no","LineTest","LineTest.html#method-i-test_skew_no","()",""],["test_skew_yes","LineTest","LineTest.html#method-i-test_skew_yes","()",""],["test_sum_vector","VectorTest","VectorTest.html#method-i-test_sum_vector","()",""],["test_surface_area","SphereTest","SphereTest.html#method-i-test_surface_area","()",""],["test_translate","PointTest","PointTest.html#method-i-test_translate","()",""],["test_volume","SphereTest","SphereTest.html#method-i-test_volume","()",""],["to_a","Plane","Plane.html#method-i-to_a","()",""],["to_a","Point","Point.html#method-i-to_a","()",""],["to_a","Vector","Vector.html#method-i-to_a","()",""],["translate","Point","Point.html#method-i-translate","(vector)","<p>Translate a point with a vector\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">-1</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">translate</span>(<span class=\"ruby-constant\">Vector</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>))\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["volume","Sphere","Sphere.html#method-i-volume","()","<p>Find the volume of a sphere.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">&gt;&gt;</span> <span class=\"ruby-constant\">Sphere</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">Point</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>), <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">volume</span>\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">113.09733552923254</span>\n</pre>\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre>t.libs &lt;&lt; &#39;test&#39;</pre>\n"],["Circle.html","","doc/Circle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Line.html","","doc/Line_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["LineTest.html","","doc/LineTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["LinearEquation.html","","doc/LinearEquation_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Plane.html","","doc/Plane_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Point.html","","doc/Point_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["PointTest.html","","doc/PointTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Rakefile.html","","doc/Rakefile_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Rakefile …\n"],["TestCircle.html","","doc/TestCircle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["TestPlane.html","","doc/TestPlane_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["TestTriangle.html","","doc/TestTriangle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Triangle.html","","doc/Triangle_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Vector.html","","doc/Vector_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["VectorTest.html","","doc/VectorTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;class …\n"],["Circle_html.html","","doc/doc/Circle_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Circle.html …\n"],["LineTest_html.html","","doc/doc/LineTest_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;LineTest.html …\n"],["Line_html.html","","doc/doc/Line_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Line.html …\n"],["LinearEquation_html.html","","doc/doc/LinearEquation_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;LinearEquation.html …\n"],["Plane_html.html","","doc/doc/Plane_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Plane.html …\n"],["PointTest_html.html","","doc/doc/PointTest_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;PointTest.html …\n"],["Point_html.html","","doc/doc/Point_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Point.html …\n"],["Rakefile_html.html","","doc/doc/Rakefile_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Rakefile.html …\n"],["TestCircle_html.html","","doc/doc/TestCircle_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;TestCircle.html …\n"],["TestPlane_html.html","","doc/doc/TestPlane_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;TestPlane.html …\n"],["TestTriangle_html.html","","doc/doc/TestTriangle_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;TestTriangle.html …\n"],["Triangle_html.html","","doc/doc/Triangle_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Triangle.html …\n"],["VectorTest_html.html","","doc/doc/VectorTest_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;VectorTest.html …\n"],["Vector_html.html","","doc/doc/Vector_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Vector.html …\n"],["fonts_css.html","","doc/doc/fonts_css_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;fonts.css …\n"],["geometry_3d_gemspec_html.html","","doc/doc/geometry_3d_gemspec_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;geometry_3d_gemspec.html …\n"],["index_html.html","","doc/doc/index_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;index.html …\n"],["darkfish_js.html","","doc/doc/js/darkfish_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;darkfish.js …\n"],["jquery_js.html","","doc/doc/js/jquery_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;jquery.js …\n"],["navigation_js.html","","doc/doc/js/navigation_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;navigation.js …\n"],["search_index_js.html","","doc/doc/js/search_index_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;search_index.js …\n"],["search_js.html","","doc/doc/js/search_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;search.js …\n"],["searcher_js.html","","doc/doc/js/searcher_js_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;searcher.js …\n"],["rdoc_css.html","","doc/doc/rdoc_css_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;rdoc.css …\n"],["table_of_contents_html.html","","doc/doc/table_of_contents_html_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;table_of_contents.html …\n"],["fonts.css","","doc/fonts_css.html","","\n<pre>Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/),\nwith Reserved Font Name &quot;Source&quot;. ...</pre>\n"],["geometry_3d_gemspec.html","","doc/geometry_3d_gemspec_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;geometry_3d.gemspec …\n"],["index.html","","doc/index_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;RDoc …\n"],["darkfish.js","","doc/js/darkfish_js.html","","\n<pre>Darkfish Page Functions\n$Id: darkfish.js 53 2009-01-07 02:52:03Z deveiant $\n\nAuthor: Michael Granger ...</pre>\n"],["jquery.js","","doc/js/jquery_js.html","","\n<pre>! jQuery v1.6.4 http://jquery.com/ | http://jquery.org/license</pre>\n<p>(function(a,b){function cu(a){return f.isWindow …\n"],["navigation.js","","doc/js/navigation_js.html","","\n<pre>Navigation allows movement using the arrow keys through the search results.\n\nWhen using this library ...</pre>\n"],["search.js","","doc/js/search_js.html","","<p>Search = function(data, input, result) {\n\n<pre>this.data = data;\nthis.$input = $(input);\nthis.$result = $(result); ...</pre>\n"],["search_index.js","","doc/js/search_index_js.html","","<p>var search_data = {“index”:{“searchIndex”:,“longSearchIndex”:,“info”:[,[“ …\n"],["searcher.js","","doc/js/searcher_js.html","","<p>Searcher = function(data) {\n\n<pre>this.data = data;\nthis.handlers = [];</pre>\n<p>}\n"],["rdoc.css","","doc/rdoc_css.html","","\n<pre>&quot;Darkfish&quot; Rdoc CSS\n$Id: rdoc.css 54 2009-01-27 01:09:48Z deveiant $\n\nAuthor: Michael Granger &lt;ged@FaerieMUD.org&gt; ...</pre>\n"],["table_of_contents.html","","doc/table_of_contents_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta charset=“UTF-8”&gt;\n<p>&lt;title&gt;Table …\n"],["geometry_3d.gemspec","","geometry_3d_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;geometry_3d&#39;\ns.version     = &#39;0.1.1&#39;\ns.executables = &#39;geometry_3d&#39; ...</pre>\n"]]}}